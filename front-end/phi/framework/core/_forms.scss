/* Requires globals.css */

/* Standard Forms ---------------------- */

form {
	margin: 0 0 $baseLineHeight;
}
.row form .row {
	margin: 0 (-$columnGutter);

	&.collapse {
		margin: 0;
	}
}
label {
	color: $labelFontColor;
	cursor: pointer;
	display: block;
	font-weight: $labelFontWeight;
	margin-top: $baseLineHeight;

	&.right {
		float: none;
		text-align: right;
	}
}
input[type='text'],
input[type='password'],
input[type='date'],
input[type='datetime'],
input[type='email'],
input[type='number'],
input[type='search'],
input[type='tel'],
input[type='time'],
input[type='url'],
textarea,
select {
	background-color: $inputBgColor;
	font-family: inherit;
	border: $inputBorderWidth $inputBorderStyle $inputBorderColor;
	@include border-radius($inputBorderRadius);
	color: $inputFontColor;
	display: block;
	margin: 0 0 $baseLineHeight 0;
	padding: ($baseLineHeight / 2);
	height: $baseLineHeight * 2;
	width: 100%;

	&.oversize {
		font-size: 1.125;
		padding: $baseLineHeight ($formSpacing / 2);
	}
}
input + small {
	display: block;
	padding: 0 4px;
	margin-top: -($baseLineHeight * 1.15);
	border-top: none;
	@include border-corner-radius(bottom, right, $inputBorderRadius);
	@include border-corner-radius(bottom, left, $inputBorderRadius);
}
input:focus, textarea:focus {
	background: $inputFocusBgColor;
	border-color: $inputFocusBorderColor;
}
.inputPrefix,
.inputPostfix {
	display: block;
	padding-top: 0;
	padding-bottom: 0;

	input {
		display: inline-block;
		width: 75%;
	}
}
.addOn {
	display: inline-block;
	vertical-align: top;
	padding: ($baseLineHeight / 2);
	height: $baseLineHeight * 2;
	width: 25%;
	background: $mainColor;
	border: 1px solid $inputBorderColor;
	text-align: center;
	line-height: 1em;

	&.button {
		margin: 0;
		@include border-radius(0);
	}
}
.inputPrefixMini {

	.addOn {
		width: 15%
	}
	input {
		width: 85%;
	}
}
.inputPrefix {

	.addOn {
		border-right: none;
		@include border-corner-radius(top, left, $inputBorderRadius);
		@include border-corner-radius(bottom, left, $inputBorderRadius);
	}
	input {
		@include border-corner-radius(top, left, 0);
		@include border-corner-radius(bottom, left, 0);
	}
}
.inputPostfix {

	.addOn {
		border-left: none;
		@include border-corner-radius(top, right, $inputBorderRadius);
		@include border-corner-radius(bottom, right, $inputBorderRadius);
	}
	input {
		@include border-corner-radius(top, right, 0);
		@include border-corner-radius(bottom, right, 0);
	}
}
textarea {
	height: $baseLineHeight * 4;
}
select {
	-webkit-appearance: none;
	line-height: 1em;
	background: url('../../phi/framework/img/svg-icons/select-arrow.svg') no-repeat right center, $mainColor;
	cursor: pointer;

	&:hover, &:focus {
		@include box-shadow(inset 0 4em 4px rgba(0, 0, 0, 0.025));
	}
	&:active {
		@include box-shadow(inset 0 4em 4px rgba(0, 0, 0, 0.05));
	}
}

/* Inline form */

.inlineForm label, .inlineForm input {
	display: inline-block;
	vertical-align: top;
}
.inlineForm label {
	margin: 0;
	width: 30%;
	text-align: right;
	padding: ($baseLineHeight / 2) ($baseLineHeight / 2) 0 0;
}
.inlineForm input {
	width: 59%;
}

/* Fieldsets */
fieldset {
	border: none;
	border-top: solid 1px #ddd;
	padding: 0 $baseLineHeight;
	margin: 0;

	legend {
		font-weight: bold;
		padding: 0 5px;
		margin: 0 -5px;
	}
}

/* Required */
.required label,
label.required,
select.required,
p.required {
	color: $alertColor;

	&:after {
		content: " *";
	}
}

/* Errors */
.error input,
input.error,
.error textarea,
textarea.error,
input.ng-invalid,
input.ng-invalid-pattern {
	border-color: $alertColor;
	background-color: rgba($alertColor, 0.1);
	@include border-corner-radius(bottom, left, 0);
	@include border-corner-radius(bottom, right, 0);
}
.error label, label.error {
	color: $alertColor;
}
.error textarea, textarea.error {
	&:focus {
		background: darken($white, 2%);
		border-color: darken($white, 30%);
	}
}
/* Very large screens */
@media only screen and (min-width: $screenXlarge) {}

/* Medium screens */
@media only screen and (max-width: $screenMedium) and (min-width: $screenSmall) {}

/* Small screens */
@media only screen and (max-width: $screenSmall) {


	.inputPrefix,
	.inputPostfix {
		display: block;
		padding-top: 0;
		padding-bottom: 0;

		input {
			display: inline-block;
			width: 60%;
		}
	}
	.addOn {
		display: inline-block;
		vertical-align: top;
		padding: ($baseLineHeight / 2);
		height: $baseLineHeight * 2;
		width: 40%;
		background: $mainColor;
		border: 1px solid $inputBorderColor;
		text-align: center;
		line-height: 1em;

		&.button {
			margin: 0;
			width: 40%;
			@include border-corner-radius(top, right, $inputBorderRadius);
			@include border-corner-radius(bottom, right, $inputBorderRadius);
		}
	}
	.inputPrefixMini {

		.addOn {
			width: 25%
		}
		input {
			width: 75%;
		}
	}
	.inputPrefix {

		.addOn {
			border-right: none;
			@include border-corner-radius(top, left, $inputBorderRadius);
			@include border-corner-radius(bottom, left, $inputBorderRadius);
		}
		input {
			@include border-corner-radius(top, left, 0);
			@include border-corner-radius(bottom, left, 0);
		}
	}
	.inputPostfix {

		.addOn {
			border-left: none;
			@include border-corner-radius(top, right, $inputBorderRadius);
			@include border-corner-radius(bottom, right, $inputBorderRadius);
		}
		input {
			@include border-corner-radius(top, right, 0);
			@include border-corner-radius(bottom, right, 0);
		}
	}
}

/* Landscape Orientation */
@media screen and (orientation: landscape) {}

/* Portrait Orientation */
@media screen and (orientation: portrait) {}

/* Touch Detection */
.touch .your-class {}
