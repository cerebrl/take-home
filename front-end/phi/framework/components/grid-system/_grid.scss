/***********************************
 * The Grid ---------------------- */

.container {
	width: $containerWidth;
	max-width: $containerMaxWidth;
	min-width: $containerMinWidth;
	margin: 0 auto;
}

/* NOTE TO USER: Use rowMain for the initial row of your page */
.rowMain {
	font-family: Georgia;
	margin: 0 $columnGutter;
	max-width: $rowMainMaxWidth;
	min-width: $rowMainMinWidth;
}

/* NOTE TO USER: Use this for all subsequent rows */
.row {
	font-family: Georgia;
	display: block;
	width: $rowWidth;
	margin: 0 (-$columnGutter);
	max-width: $rowMaxWidth;
	min-width: $rowMinWidth;
}

// TODO: It would be better if this was automatically generated by Sass
.oneColumn,
.oneColumns,
.twoColumns,
.threeColumns,
.fourColumns,
.fiveColumns,
.sixColumns,
.sevenColumns,
.eightColumns,
.nineColumns,
.tenColumns,
.elevenColumns,
.twelveColumns,
.thirteenColumns,
.fourteenColumns {
	display: inline-block;
	vertical-align: top;
	padding: 0 $columnGutter;
	font-family: $baseFontFamily;
}

// Creating spaced column classes
@for $i from 1 through $totalColumns {

	.#{convert-number-to-word($i, 'spaced')} {
		width: gridCalc($i, $totalColumns);
	}
}

// Creating .row .offsetBy_# classes
@for $i from 1 through $totalColumns - 2 {
	.offsetBy_#{convert-number-to-word($i, '')} {
		margin-#{$defaultDirection}: gridCalc($i, $totalColumns);
	}
}

img, object, embed {
	max-width: 100%;
	height: auto;
}

object, embed {
	height: 100%;
}

img {
	-ms-interpolation-mode: bicubic;
}

#map_canvas img, .map_canvas img {
	max-width: none !important;
}

/* Block Grids ---------------------- */

/* These are 2-up, 3-up, 4-up and 5-up ULs, suited
for repeating blocks of content. Add 'mobile' to
them to switch them just like the layout grid
(one item per line) on phones

For IE7/8 compatibility block-grid items need to be
the same height. You can optionally uncomment the
lines below to support arbitrary height, but know
that IE7/8 do not support :nth-child.
-------------------------------------------------- */

.blockGrid {
	display: block;
	overflow: hidden;
	padding: 0;
	font-family: Georgia;

	& > * {
		display: inline-block;
		height: auto;
		font-family: $baseFontFamily;
	}

	@for $i from 1 through $blockGridElements {
		&.#{convert-number-to-word($i, '')}Up {

			&>li {
				@if $i == 1 {
					width: 100%/$i;
					padding: 0 0 15px;
				}
				@if $i == 2 {
					width: 99%/$i;
					padding: 0 15px 15px;
				}
				@if $i == 3 {
					width: 98.5%/$i;
					padding: 0 12px 12px;
				}
				@if $i == 4 {
					width: 98%/$i;
					padding: 0 10px 10px;
				}
				@if $i == 5 {
					width: 97.5%/$i;
					padding: 0 8px 8px;
				}
			}
		}
	}
}

/* Very large screens */
@media only screen and (min-width: $screenXlarge) {}

/* Medium screens */
@media only screen and (max-width: $screenMedium) and (min-width: $screenSmall) {}

/* Small screens */
@media only screen and (max-width: $screenSmall) {

	.row-main {
		margin: 0;
	}

	.oneColumn,
	.oneColumns,
	.twoColumns,
	.threeColumns,
	.fourColumns,
	.fiveColumns,
	.sixColumns,
	.sevenColumns,
	.eightColumns,
	.nineColumns,
	.tenColumns,
	.elevenColumns,
	.twelveColumns,
	.thirteenColumns,
	.fourteenColumns {
		width: 100%;
		display: block;
	}
	.oneSeamlessColumn,
	.oneSeamlessColumns,
	.twoSeamlessColumns,
	.threeSeamlessColumns,
	.fourSeamlessColumns,
	.fiveSeamlessColumns,
	.sixSeamlessColumns,
	.sevenSeamlessColumns,
	.eightSeamlessColumns,
	.nineSeamlessColumns,
	.tenSeamlessColumns,
	.elevenSeamlessColumns,
	.twelveSeamlessColumns,
	.thirteenSeamlessColumns,
	.fourteenSeamlessColumns {
		width: 100%;
		display: block;
	}
	// Creating .row .offsetBy_# classes
	@for $i from 1 through $totalColumns - 2 {
		.offsetBy_#{convert-number-to-word($i, '')} {
			margin-#{$defaultDirection}: 0;
		}
	}
}

/* Landscape Orientation */
@media screen and (orientation: landscape) {

}

/* Portrait Orientation */
@media screen and (orientation: portrait) {

}

/* Touch Detection */
.touch .your-class {}
